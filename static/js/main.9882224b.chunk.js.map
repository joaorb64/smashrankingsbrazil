{"version":3,"sources":["logo.svg","components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contacts","state","selectedLeague","players","nextProps","this","props","updateData","fetch","contacts","then","res","json","data","Object","keys","forEach","player","push","setState","catch","console","log","i","style","textAlign","class","role","map","contact","onClick","selectLeague","type","name","Component","App","leagues","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,qICyD5BC,G,uNAtDbC,MAAQ,CACNC,eAAgB,EAChBC,QAAS,I,kFAGQC,GACdA,IAAcC,KAAKC,OACpBD,KAAKE,e,mCAIK,IAAD,OACXC,MAAM,2DAA2DH,KAAKC,MAAMG,SAASJ,KAAKJ,MAAMC,gBAAgB,SAC/GQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,GAAGA,EAAK,CACN,IAAIV,EAAU,GAEdW,OAAOC,KAAKF,GAAMG,SAAQ,SAASC,GACjCd,EAAQe,KAAKL,EAAKI,OAGpB,EAAKE,SAAS,CAAEhB,QAASA,QAG5BiB,MAAMC,QAAQC,O,mCAGJC,GACRA,GAAKlB,KAAKJ,MAAMC,iBACjBG,KAAKJ,MAAMC,eAAiBqB,EAC5BlB,KAAKE,gB,+BAIC,IAAD,OAEP,OADAc,QAAQC,IAAIjB,KAAKJ,MAAME,SAErB,yBAAKqB,MAAO,CAACC,UAAW,WACtB,yBAAKC,MAAM,YAAYC,KAAK,SACzBtB,KAAKC,MAAMG,SAASmB,KAAI,SAACC,EAASN,GAAV,OACvB,4BAAQO,QAAS,kBAAI,EAAKC,aAAaR,IAAIS,KAAK,SAASN,MAAM,mBAAmBG,OAGtF,wBAAIH,MAAM,cACPrB,KAAKJ,MAAME,QAAQyB,KAAI,SAACX,GAAD,OACtB,wBAAIS,MAAM,mBAAmBT,EAAOgB,e,GA/CzBC,cC0BRC,E,2MAtBblC,MAAQ,CACNmC,QAAS,I,oFAGW,IAAD,OACnB5B,MAAM,oEACLE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKM,SAAS,CAAEiB,QAASvB,EAAKuB,aAE/BhB,MAAMC,QAAQC,O,+BAIf,OACE,yBAAKI,MAAM,aACT,kBAAC,EAAD,CAAUjB,SAAUJ,KAAKJ,MAAMmC,e,GAjBrBF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.9882224b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass Contacts extends Component {\n  state = {\n    selectedLeague: 0,\n    players: []\n  }\n\n  componentDidUpdate(nextProps) {\n    if(nextProps !== this.props) {\n      this.updateData();\n    }\n  }\n\n  updateData() {\n    fetch('https://cdn.jsdelivr.net/gh/joaorb64/tournament_api/out/'+this.props.contacts[this.state.selectedLeague]+'.json')\n    .then(res => res.json())\n    .then((data) => {\n      if(data){\n        let players = [];\n\n        Object.keys(data).forEach(function(player){\n          players.push(data[player]);\n        });\n\n        this.setState({ players: players })\n      }\n    })\n    .catch(console.log)\n  }\n\n  selectLeague(i){\n    if(i != this.state.selectedLeague){\n      this.state.selectedLeague = i;\n      this.updateData();\n    }\n  }\n\n  render (){\n    console.log(this.state.players);\n    return(\n      <div style={{textAlign: \"center\"}}>\n        <div class=\"btn-group\" role=\"group\">\n          {this.props.contacts.map((contact, i) => (\n            <button onClick={()=>this.selectLeague(i)} type=\"button\" class=\"btn btn-primary\">{contact}</button>\n          ))}\n        </div>\n        <ul class=\"list-group\">\n          {this.state.players.map((player) => (\n            <li class=\"list-group-item\">{player.name}</li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n};\n\nexport default Contacts","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Contacts from './components/contacts';\n\nclass App extends Component {\n  state = {\n    leagues: []\n  }\n\n  componentWillMount() {\n    fetch('https://cdn.jsdelivr.net/gh/joaorb64/tournament_api/leagues.json')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ leagues: data.leagues })\n    })\n    .catch(console.log)\n  }\n\n  render () {\n    return (\n      <div class=\"container\">\n        <Contacts contacts={this.state.leagues} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}