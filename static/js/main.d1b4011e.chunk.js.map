{"version":3,"sources":["components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","state","selectedLeague","players","nextProps","this","props","updateData","fetch","contacts","then","res","json","data","Object","keys","forEach","player","push","setState","catch","console","log","i","name","toLowerCase","replace","style","textAlign","fontFamily","class","role","margin","map","contact","onClick","selectLeague","type","padding","key","backgroundColor","borderRadius","border","marginBottom","width","height","lineHeight","display","alignSelf","overflow","animationDelay","fontSize","rank","flexGrow","mains","length","backgroundImage","getCharName","backgroundPosition","backgroundSize","Component","App","leagues","document","getElementById","play","loop","muted","autoplay","oncanplay","onloadedmetadata","id","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1b4011e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Contacts extends Component {\n  state = {\n    selectedLeague: 0,\n    players: []\n  }\n\n  componentDidUpdate(nextProps) {\n    if(nextProps !== this.props) {\n      this.updateData();\n    }\n  }\n\n  updateData() {\n    fetch('https://cdn.jsdelivr.net/gh/joaorb64/tournament_api/out/'+this.props.contacts[this.state.selectedLeague]+'.json')\n    .then(res => res.json())\n    .then((data) => {\n      if(data){\n        let players = [];\n\n        Object.keys(data).forEach(function(player){\n          players.push(data[player]);\n        });\n\n        this.setState({ players: players })\n      }\n    })\n    .catch(console.log)\n  }\n\n  selectLeague(i){\n    if(i != this.state.selectedLeague){\n      this.state.selectedLeague = i;\n      this.updateData();\n    }\n  }\n\n  getCharName(name){\n    return name.toLowerCase().replace(/ /g, \"_\");\n  }\n\n  render (){\n    console.log(this.state.players);\n    return(\n      <div style={{textAlign: \"center\", fontFamily: \"SmashFont\"}}>\n        <div class=\"btn-group\" role=\"group\" style={{margin: 10}}>\n          {this.props.contacts.map((contact, i) => (\n            <button onClick={()=>this.selectLeague(i)} type=\"button\" class=\"btn btn-danger\">{contact}</button>\n          ))}\n        </div>\n        <ul class=\"list-group\" style={{padding: \"10px\"}}>\n          {this.state.players.map((player, i) => (\n            <li key={this.state.selectedLeague+\"_\"+i} class=\"slide-fade list-group-item\" style={{\n              backgroundColor: \"#f0f0f0\", borderRadius: \"10px\", border: 0, marginBottom: \"5px\", width: \"512px\", height: \"42px\", lineHeight: \"48px\",\n              padding: 0, display: \"flex\", alignSelf: \"center\", overflow: \"hidden\", animationDelay: (i/30.0)+\"s\"\n            }}>\n              <div style={{width: \"45px\", textAlign: \"center\", fontSize: \"1.2rem\"}}>{player.rank}</div>\n              <div style={{flexGrow: 1}}>{player.name}</div>\n              {player.mains.length > 0 ?\n                <div style={{\n                  backgroundImage: `url(./portraits-small/${this.getCharName(player.mains[0].name)}.png)`,\n                  width: \"128px\", backgroundPosition: \"center\", backgroundSize: \"cover\", backgroundColor: \"#ababab\"\n                }}></div>\n                :\n                <div style={{\n                  backgroundImage: `url(./portraits-small/${\"random\"}.png)`,\n                  width: \"128px\", backgroundPosition: \"center\", backgroundSize: \"cover\", backgroundColor: \"#ababab\"\n                }}></div>\n              }\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n};\n\nexport default Contacts","import React, { Component } from 'react';\nimport './App.css';\nimport Contacts from './components/contacts';\n\nclass App extends Component {\n  state = {\n    leagues: []\n  }\n\n  componentWillMount() {\n    fetch('https://cdn.jsdelivr.net/gh/joaorb64/tournament_api/leagues.json')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ leagues: data.leagues })\n    })\n    .catch(console.log)\n  }\n\n  componentDidMount() {\n    document.getElementById('myVideo').play();\n  }\n\n  render () {\n    return (\n      <div>\n        <video loop muted autoplay oncanplay=\"this.play()\" onloadedmetadata=\"this.muted=true\" id=\"myVideo\">\n          <source src=\"./background.mp4\" type=\"video/mp4\" />\n        </video>\n        <div class=\"container\" style={{backgroundColor: \"#2a2335\"}}>\n          <Contacts contacts={this.state.leagues} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}